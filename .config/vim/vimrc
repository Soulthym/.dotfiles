set nocompatible            "Sweet VIM features
set shell=/bin/bash         "if using a non POSIX Compliant shell
set ttimeoutlen=10

filetype plugin on
nnoremap <SPACE> <Nop>
let mapleader=" "

" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.config/vim'
let &runtimepath.=','.vimDir
"let g:python_highlight_all = 1
"let g:python_slow_sync     = 0

call plug#begin('~/.config/vim/autorun/plugged')
    "Plug 'flazz/vim-colorschemes'
    "Plug 'rafi/awesome-vim-colorschemes'
    Plug 'Glench/Vim-Jinja2-Syntax'
    Plug 'inkarkat/vim-SyntaxRange'
    Plug 'altercation/vim-colors-solarized'
    "Plug 'vim-python/python-syntax'
    Plug 'sheerun/vim-polyglot'
    "Plug 'dylanaraps/wal.vim'
    "Plug 'jonathanfilip/vim-lucius'
    Plug 'airblade/vim-gitgutter'
    Plug 'soulthym/vim-focus-buffer'
    Plug 'baskerville/vim-sxhkdrc'
    Plug 'mhartington/oceanic-next'
    "Plug 'barlog-m/oceanic-primal-vim'
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
    " TODO: set colors for semantic highlighting
    Plug 'jaxbot/semantic-highlight.vim'
    "Plug 'ajutsushi/tagbar'
    Plug 'patstockwell/vim-monokai-tasty'
    Plug 'pangloss/vim-javascript'
    Plug 'MaxMEllon/vim-jsx-pretty'
    Plug 'styled-components/vim-styled-components'
    Plug 'elzr/vim-json'
call plug#end()

set background=dark
"colorscheme OceanicNext
let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty
"colorscheme solarized
"colorscheme wal
"colorscheme default
"hi Normal ctermbg=235
"hi Folded ctermbg=NONE ctermfg=6 cterm=NONE
"hi Normal ctermbg=NONE
"hi LineNr ctermbg=NONE 

" undo history
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/.undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

let g:mkdp_browser = 'firefox'


if has ('autocmd') " Remain compatible with earlier versions
    augroup vimconfig
        autocmd!
        autocmd BufWritePost $MYVIMRC
                    \ source $MYVIMRC                   |
                    \ echom "Reloaded " . $MYVIMRC      |
                    \ redraw                            |
        autocmd BufWritePost $MYGVIMRC 
                    \ if has('gui_running')             |
                    \     source $MYGVIMRC              |
                    \     echom "Reloaded " . $MYGVIMRC |
                    \     redraw                        |
                    \ endif                             |
        autocmd BufWritePost *.vim
                    \ source $MYVIMRC                   |
                    \ source %
        nmap <leader>s :source $MYVIMRC<cr>
    augroup END
    augroup html
        autocmd!
        autocmd BufNewFile,BufRead *.html
                    \ set filetype=html   |
                    \ set smartindent     |
                    \ normal gg=G
        autocmd BufNewFile,BufRead *.j2
                    \ set filetype=jinja  |
                    \ set smartindent     |
                    \ set tabstop=2       |
                    \ set shiftwidth=2    |
                    \ normal gg=G
        autocmd BufWritePre *.html,*.j2 nnoremap <leader>f mmgg=G`m
    augroup END
    augroup python
        " Start a terminal window 
        nmap <leader>p :botright vertical terminal ipython --no-autoindent<cr>
    augroup END
    augroup markdown
        autocmd!
        "autocmd TextChanged,InsertLeave *.md call TabFormat()
        xmap <leader>T ypVr=
        xmap <leader>t ypVr-
    augroup END
    augroup yaml
        autocmd! 
        autocmd BufNewFile,BufRead *.yml,*.yaml
                    \ call SyntaxRange#Include(' py:', '#!py', 'python') |
                    \ call SyntaxRange#Include(' yado:', '#!yado', 'python') |
                    \ call SyntaxRange#Include(' html:', '<!-- !html -->', 'html')
    augroup END
    augroup everything
        autocmd!
        " Automatically disable highlighting when entering insert mode, and restore the search register afterwards
        autocmd InsertEnter * set nohlsearch
        for s:k in ['n', 'N', '?', '/']
            execute('nnoremap ' . s:k . ' :set hlsearch<cr>' . s:k)
        endfor

        " autocmd InsertEnter * :let b:_search=@/|let @/=''
        " autocmd InsertLeave * :let @/=get(b:,'_search','')
        " <Backspace> to hide last search's hightlighting
        nnoremap <silent> <bs> :set nohlsearch<cr>
        "X11 - Clipboard support (requires gvim instead of vim package under arch linux for the +clipboard compile option)
        "zy zY zp and zP aren't mapped by default, perfect for actuall clipboard interactions!
        nnoremap zy "+y
        nnoremap zY "+Y
        nnoremap zp "+p
        nnoremap zP "+P
        vnoremap zy "+y
        vnoremap zY "+Y
        vnoremap zp "+p
        vnoremap zP "+P
        " Append and prepend blanklines
        nnoremap <silent> ]<Space> :<C-u>put =repeat(nr2char(10),v:count)<Bar>execute "'[-1"<CR>
        nnoremap <silent> [<Space> :<C-u>put!=repeat(nr2char(10),v:count)<Bar>execute "']+1"<CR>
        " No freaking Ex-mode, append instead
        nnoremap Q A
        " Running code in a terminal window:
        " Run a line
        nmap <leader>l <Plug>(send-to-term-line)
        " Run a <motion>
        nmap <leader>r <Plug>(send-to-term)
        " Run a visual selection
        xmap <leader>r <Plug>(send-to-term)
        " Run the current file
        nmap <leader><leader> mlgg rG`l
        " Run a paragraph easily
        " nmap <leader><leader> mrvap<Plug>(send-to-term)`r
        " Visual inner column [https://stackoverflow.com/a/54686136/10264886]
        nnoremap vic <C-v>iWmw{joO`woOmwoO}koO`w
        " Git-gutter
        " remap Ctrl-G to an unused key, see `:help normal-index`, here I chose Ctrl-K
        nnoremap <c-k> <c-g>
        " remap Ctrl-G for Toggling git-gutter
        nnoremap <c-g> :GitGutterToggle<cr>
        nnoremap <Leader>S :SemanticHighlightToggle<cr>
        nnoremap <Leader>] :TagbarToggle<cr>
        " remap Ctrl-W Enter/ Ctrl-W Ctrl-M to maximize window

        nnoremap <c-w><c-m> <c-w><c-_><c-w><bar>:let t:maxed<cr>
        nmap <c-w>m <c-w><c-m> 
    augroup END
endif " has autocmd
set wildmenu                    "helps with tab-completion
set wildmode=longest:full,full
set nowrap                      "no line wraping
set omnifunc=syntaxcomplete#Complete

set splitright
set splitbelow

"augroup python
"    autocmd!
"    autocmd BufNewFile,BufRead *.py
"                \ set filetype=python |
"                \ set textwidth=0     | "don't wrap the line automatically
"                \ set tabstop=8       | "tab character's width
"                \ set softtabstop=0   | 
"                \ set shiftwidth=4    |
"                \ set expandtab       |
"                \ set autoindent      |
"                \ set smarttab        |
"augroup END
set textwidth=0                 "don't wrap the line automatically
set tabstop=8                   "tab character's width
set softtabstop=0               
set shiftwidth=4
set expandtab
set autoindent
set smarttab

set incsearch                   "incremental highlighting
set nohlsearch                  " no highlighting of search by default, a remap takes care of enabling it when searching

set relativenumber
set number
set fileformat=unix
set modeline " file specific tweeks


filetype indent on

" TODO: Nested filetypes for syntax highlighting
"runtime! syntax/yaml.vim
"unlet b:current_syntax
"syntax include @Python syntax/python.vim
"syntax region pythonCode  start='#ft=python' keepend end='#ft'  contains=@Python
"runtime! syntax/python.vim
"unlet b:current_syntax
"syntax include @Python syntax/python.vim
"syntax region pythonCode  start=+<Python>+ keepend end=+/</Python>+  contains=@Python


"Python syntax
"let g:python_version_2 = 0
"let b:python_version_2 = 0
"let g:python_highlight_builtins = 1
"let g:python_highlight_builtin_objs = 1
"let g:python_highlight_builtin_types = 1
"let g:python_highlight_builtin_funcs = 1
"let g:python_highlight_builtin_funcs_kwarg = 1
"let g:python_highlight_exceptions = 1
"let g:python_highlight_string_formatting = 1
"let g:python_highlight_string_format = 1
"let g:python_highlight_string_templates = 1
"let g:python_highlight_indent_errors = 1
"let g:python_highlight_space_errors = 1
"let g:python_highlight_doctests = 1
"let g:python_highlight_func_calls = 1
"let g:python_highlight_class_vars = 1
"let g:python_highlight_operators = 1
"let g:python_highlight_file_headers_as_comments = 1
"let g:python_slow_sync = 1
"
