set nocompatible
filetype plugin on
" Vim Plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin()
Plug 'skywind3000/asyncrun.vim'
Plug 'tpope/vim-surround'
Plug 'davidhalter/jedi-vim'
Plug 'markonm/traces.vim'
Plug 'skywind3000/vim-rt-format'
Plug 'sainnhe/sonokai'
Plug 'sheerun/vim-polyglot'
Plug 'mattn/vim-treesitter'
Plug 'junegunn/vim-slash'
call plug#end()

" Config
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "", 0700)
endif
set undodir=~/.vim/undo
set undofile

" real time formatting
" By default, it will be triggered by `ENTER` in insert mode.
" set this to 1 to use `CTRL+ENTER` instead, and keep the  
" default `ENTER` behavior unchanged.
let g:rtf_ctrl_enter = 0
" Enable formatting when leaving insert mode
let g:rtf_on_insert_leave = 1

" colors
if has('+termguicolors')
  set termguicolors
endif
" The configuration options should be placed before `colorscheme sonokai`.
" default | atlantis | andromeda | shusia | maia | espresso
"let g:sonokai_style = 'andromeda' 
"let g:sonokai_style = 'default'
"let g:sonokai_style = 'atlantis'
let g:sonokai_style = 'shusia'
"let g:sonokai_style = 'maia'
"let g:sonokai_style = 'espresso'
let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 0
set background=dark
" Inspect $TERM instad of t_Co as it works in neovim as well
if &term =~ '256color'
  " Enable true (24-bit) colors instead of (8-bit) 256 colors.
  " :h true-color
  if has('termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
  endif
  colorscheme sonokai
endif
set backspace=indent,eol,start  " more powerful backspacing
set mouse=a
set omnifunc=syntaxcomplete#Complete
set number
set relativenumber
set incsearch
let g:jedi#show_call_signatures = 2
augroup ft_all
  autocmd!
  autocmd TextYankPost * call system('termux-clipboard-set &', @")
  function Paste(p)
    let sysclip=system('termux-clipboard-get')
    if sysclip != @"
      let @"=sysclip
    endif
    return a:p
  endfunction
  noremap <expr> p Paste('p')
  noremap <expr> P Paste('P')
  autocmd BufEnter * call QuickfixLastWindow()
  function! QuickfixLastWindow()
    if &buftype=="quickfix"
      if winbufnr(2) == -1
        " this window is last on screen & quickfix
	" quit without warning
        quit!
      endif
    endif
  endfunction
  " autocmd CursorMoved * set nohlsearch
  " nnoremap / :set hlsearch<cr>/
  " nnoremap ? :set hlsearch<cr>?
  " nnoremap n n:set hlsearch<cr>
  " nnoremap N N:set hlsearch<cr>
augroup END

augroup ft_vimscript
  autocmd!
  autocmd BufWritePost,FileWritePost *.vim,~/.vimrc,~/*/vimrc source <afile>
augroup END

augroup ft_python
  autocmd!
  autocmd BufEnter *.py call SetupPy()
  autocmd BufWritePost *.py AsyncRun python %
  function SetupPy()
  endfunction
augroup END

let g:asyncrun_open = 8
augroup ft_astr
  autocmd!
  autocmd BufWritePost *.astr call RunAstr()
  function RunAstr()
    AsyncRun astr %
  endfunction
augroup END

